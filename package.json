function capitalize(word) {
    return word.charAt(0).toUpperCase() + word.slice(1);
}

function reverseString(value) {
    return value.split('').reverse().join('');
}

const calculator = {
    add: (a, b) => a+b,
    substract: (a, b) => a - b,
    divide: (a, b) => {
        if (b === 0)
            throw new Error('Cannot divide by zero!')
        return a / b;
    },
    multiply: (a, b) => a * b
}

function analyzeArray(array) {
    output = {}

    let sum = 0;
    array.forEach(element => {
        sum += element
    });

    output['average'] = sum / array.length;
    output['min'] = Math.min(...array);
    output['max'] = Math.max(...array);
    output['length'] = array.length;

    return output;
}

function caesarCipher(value, shift) {
    const alphabet = '.,?!abcdefghijklmnopqrstuvwxyz0123456789';
    let output = '';
    for (let i = 0; i < value.length; i++) {
        const char = value.charAt(i);
        const code = char.charCodeAt(char)
        output += String.fromCharCode(code+shift);
    }
    return output
}

module.exports = {capitalize, reverseString, calculator, analyzeArray, caesarCipher}
 42 changes: 42 additions & 0 deletions42  

const {capitalize, reverseString, calculator, analyzeArray, caesarCipher} = require('./index')

test('bebra should be Bebra', () => {
    expect(capitalize('bebra')).toBe('Bebra');
});

test('asoka should be akosa', () => {
    expect(reverseString('asoka')).toBe('akosa');
});

test('2 + 2 should be 4', () => {
    expect(calculator.add(2, 2)).toEqual(4);
});

test('5 - 4 should be 1', () => {
    expect(calculator.substract(5, 4)).toEqual(1);
});

test('8 / 2 should be 4', () => {
    expect(calculator.divide(8, 2)).toEqual(4);
});

test('10 * 8 should be 80', () => {
    expect(calculator.multiply(10, 8)).toEqual(80);
});

test('[1,8,3,4,2,6] should be average: 4, min: 1, max: 8, length: 6', () => {
    expect(analyzeArray([1,8,3,4,2,6])).toEqual({
        average: 4,
        min: 1,
        max: 8,
        length: 6
    })
})

test('abcde should be bcdef', () => {
    expect(caesarCipher('abcde', 1)).toBe('bcdef')
});

test('ABcde should be BCdef', () => {
    expect(caesarCipher('ABcde', 1)).toBe('BCdef')
});
